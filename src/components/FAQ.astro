---
import Badge from './Badge.astro';
import Titulo from './Titulo.astro';
import Parrafo from './Parrafo.astro';
import BotonPrimario from './BotonPrimario.astro';

interface Props {
  badge?: string;
  titulo?: string;
  descripcion?: string;
  preguntas: {
    pregunta: string;
    respuesta: string;
  }[];
  mostrarContacto?: boolean;
  textoContacto?: string;
  urlContacto?: string;
  textoBotonContacto?: string;
}

const { 
  badge = "FAQ",
  titulo = "Preguntas Frecuentes",
  descripcion = "Resolvemos las **dudas más comunes** sobre nuestros servicios y procesos de desarrollo.",
  preguntas,
  mostrarContacto = true,
  textoContacto = "¿Tienes más preguntas?",
  urlContacto = "/contacto",
  textoBotonContacto = "Contáctanos"
} = Astro.props;
---

<!-- FAQ Section -->
<section class="section section-padding">
  <div class="max-w-6xl mx-auto">
    <!-- Layout de 2 columnas en desktop, 1 en móvil -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
      <!-- Columna 1: Título y descripción -->
      <div class="text-center lg:text-left">
        <Badge class="mb-4" variant='secondary'>{badge}</Badge>
        <Titulo level={2} alignMobile="center" alignDesktop="left" class="mb-6">{titulo}</Titulo>
        <Parrafo alignMobile="center" alignDesktop="left" class="max-w-lg mb-6 ">
          {descripcion}
        </Parrafo>
        {mostrarContacto && (
				<BotonPrimario mensaje="Hola! Tengo algunas preguntas sobre sus servicios. ¿Podrían ayudarme?">{textoBotonContacto}</BotonPrimario>
			)}
      </div>
      
      <!-- Columna 2: Preguntas acordeón -->
      <div class="faq-accordion space-y-4">
        {preguntas.map((item, index) => (
          <div class={`faq-item bg-gray-600/20 border-radius-large overflow-hidden ${index === 0 ? 'faq-item-open' : ''}`} data-index={index}>
            <button class="faq-question w-full py-6 px-6 text-left flex justify-between items-center hover:bg-gray-700/30 transition-all duration-300">
              <span class="text-white font-normal text-lg pr-4">{item.pregunta}</span>
              <div class={`faq-icon text-blue-400 text-2xl font-bold transition-transform duration-500 ease-in-out ${index === 0 ? 'faq-icon-rotated' : ''}`}>+</div>
            </button>
            <div class={`faq-answer text-gray-300 transition-all duration-500 ease-in-out ${index === 0 ? 'faq-answer-open' : ''}`}>
              <div class="faq-answer-content px-6 pb-6 mt-5">
                <Parrafo alignMobile="left" alignDesktop="left">{item.respuesta}</Parrafo>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
    

  </div>
</section>

<style is:inline>
  /* FAQ Accordion Animations - Suaves y fluidas */
  .faq-answer {
    overflow: hidden;
    max-height: 0;
    opacity: 0;
    transition: max-height 0.6s cubic-bezier(0.4, 0, 0.2, 1), 
                opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .faq-answer-open {
    max-height: 500px;
    opacity: 1;
  }
  
  .faq-answer-content {
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateY(-10px);
  }
  
  .faq-answer-open .faq-answer-content {
    transform: translateY(0);
  }
  
  .faq-icon {
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    display: inline-block;
    font-weight: bold;
    flex-shrink: 0;
  }
  
  .faq-icon-rotated {
    transform: rotate(45deg);
  }
  
  .faq-question {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    border: none;
    background: transparent;
    width: 100%;
  }
  
  .faq-question:hover {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-1px);
  }
  
  .faq-item {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .faq-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
</style>

<script>
  // FAQ Accordion functionality - Refactorizado para animaciones suaves
  document.addEventListener('DOMContentLoaded', function() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach((item, index) => {
      const question = item.querySelector('.faq-question');
      const answer = item.querySelector('.faq-answer');
      const icon = item.querySelector('.faq-icon');
      
      if (!question || !answer || !icon) return;
      
      question.addEventListener('click', function() {
        const answerEl = answer as HTMLElement;
        const iconEl = icon as HTMLElement;
        const isCurrentlyOpen = answerEl.classList.contains('faq-answer-open');
        
        // Cerrar todas las respuestas primero
        faqItems.forEach(faqItem => {
          const faqAnswer = faqItem.querySelector('.faq-answer') as HTMLElement;
          const faqIcon = faqItem.querySelector('.faq-icon') as HTMLElement;
          
          if (faqAnswer && faqIcon) {
            faqAnswer.classList.remove('faq-answer-open');
            faqIcon.classList.remove('faq-icon-rotated');
          }
        });
        
        // Si no estaba abierta, abrir la actual
        if (!isCurrentlyOpen) {
          // Pequeño delay para que la animación de cierre se vea antes de abrir
          setTimeout(() => {
            answerEl.classList.add('faq-answer-open');
            iconEl.classList.add('faq-icon-rotated');
          }, 100);
        }
      });
    });
  });
</script>