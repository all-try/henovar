---
import BotonPrimario from './BotonPrimario.astro';

const currentPath = Astro.url.pathname;

const navItems = [
  { name: 'Inicio', href: '/' },
  { name: 'Precios y Servicios', href: '/precios-y-servicios' },
  { name: 'Proyectos', href: '/proyectos' },
  { name: 'Testimonios', href: '/testimonios' },
  { name: 'Nosotros', href: '/nosotros' },
  { name: 'Blog', href: '/blog' }
];
---

<!-- Mobile Menu Overlay - Fuera del header para cubrir toda la pantalla -->
<div id="mobile-menu-overlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 opacity-0 invisible transition-all duration-300 lg:hidden"></div>

<header class="w-full px-3 fixed top-4 z-50">
  <div id="header-container" class="bg-black/90 backdrop-blur-md border border-transparent rounded-2xl shadow-2xl max-w-6xl mx-auto transition-all duration-300">
    <nav class="px-6 py-4">
      <div class="flex items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center space-x-2">
        <a href="/" class="flex items-center space-x-2 hover:opacity-80 transition-opacity">
          <img src="/img/brand/color-logo.webp" alt="Henovar Logo" width="32" height="32" class="lg:w-7 mr-3">
          <span class="text-2xl font-normal text-gray-100">
            henovar
          </span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-4">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`
              text-sm font-medium transition-all duration-200 hover:text-blue-400 px-3 py-2 rounded-lg
              ${currentPath === item.href ? 'text-white bg-gray-700' : 'text-gray-300 hover:bg-gray-800/50'}
            `}
          >
            {item.name}
          </a>
        ))}
      </div>

      <!-- CTA Button -->
      <div class="hidden md:block">
        <BotonPrimario href="/contacto" class="text-sm px-4 py-1">
          Contactar
        </BotonPrimario>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden flex items-center justify-center w-10 h-10 text-gray-300 hover:text-white transition-colors relative"
        aria-label="Abrir menú"
      >
        <svg id="hamburger-icon" class="w-6 h-6 absolute transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg id="close-icon" class="w-6 h-6 absolute transition-all duration-300 opacity-0 rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Mobile Menu Collapsible -->
    <div id="mobile-menu" class="lg:hidden bg-black/95 backdrop-blur-md overflow-hidden transition-all duration-300 ease-in-out max-h-0 relative z-50">
      <nav class="py-6">
        <div class="space-y-3">
          {navItems.map((item) => (
            <a
              href={item.href}
              class={`
                block px-4 py-3 rounded-lg transition-all duration-200 backdrop-blur-sm flex items-center justify-between
                ${currentPath === item.href ? 'text-blue-400 bg-blue-900/40' : 'text-white bg-gray-800/50 hover:bg-gray-700/70'}
              `}
            >
              <span>{item.name}</span>
              {currentPath === item.href && (
                <div class="w-2 h-2 bg-blue-600 rounded-full"></div>
              )}
            </a>
          ))}
        </div>
        
        <!-- CTA Button -->
        <div class="mt-6">
          <BotonPrimario href="/contacto" class="w-full justify-center py-3">
            Contactar
          </BotonPrimario>
        </div>
      </nav>
    </div>
  </nav>
  </div>
</header>

<script>
    document.addEventListener('DOMContentLoaded', function() {
      const mobileMenuButton = document.getElementById('mobile-menu-button') as HTMLButtonElement;
      const mobileMenu = document.getElementById('mobile-menu') as HTMLDivElement;
      const mobileMenuOverlay = document.getElementById('mobile-menu-overlay') as HTMLDivElement;
      const headerContainer = document.getElementById('header-container') as HTMLDivElement;
      const hamburgerIcon = document.getElementById('hamburger-icon') as unknown as SVGElement;
      const closeIcon = document.getElementById('close-icon') as unknown as SVGElement;
      
      if (!mobileMenuButton || !mobileMenu || !mobileMenuOverlay || !headerContainer || !hamburgerIcon || !closeIcon) {
        console.error('Elementos del menú móvil no encontrados');
        return;
      }
      
      const mobileMenuLinks = mobileMenu.querySelectorAll('a') as NodeListOf<HTMLAnchorElement>;
      let isMenuOpen = false;
      
      function toggleMobileMenu(): void {
        if (isMenuOpen) {
          // Cerrar menú
          mobileMenu.style.maxHeight = '0px';
          mobileMenuOverlay.classList.remove('opacity-100', 'visible');
          mobileMenuOverlay.classList.add('opacity-0', 'invisible');
          
          // Cambiar borde a transparente
          headerContainer.classList.remove('border-gray-800');
          headerContainer.classList.add('border-transparent');
          
          // Animar icono de vuelta a hamburguesa
          hamburgerIcon.classList.remove('opacity-0', 'scale-0');
          hamburgerIcon.classList.add('opacity-100', 'scale-100');
          closeIcon.classList.remove('opacity-100', 'scale-100');
          closeIcon.classList.add('opacity-0', 'scale-0');
          
          isMenuOpen = false;
        } else {
          // Abrir menú
          mobileMenu.style.maxHeight = mobileMenu.scrollHeight + 'px';
          mobileMenuOverlay.classList.remove('opacity-0', 'invisible');
          mobileMenuOverlay.classList.add('opacity-100', 'visible');
          
          // Cambiar borde a visible
          headerContainer.classList.remove('border-transparent');
          headerContainer.classList.add('border-gray-800');
          
          // Animar icono a X
          hamburgerIcon.classList.remove('opacity-100', 'scale-100');
          hamburgerIcon.classList.add('opacity-0', 'scale-0');
          closeIcon.classList.remove('opacity-0', 'scale-0');
          closeIcon.classList.add('opacity-100', 'scale-100');
          
          isMenuOpen = true;
        }
      }
      
      function closeMobileMenu(): void {
        if (!isMenuOpen) return;
        
        mobileMenu.style.maxHeight = '0px';
        mobileMenuOverlay.classList.remove('opacity-100', 'visible');
        mobileMenuOverlay.classList.add('opacity-0', 'invisible');
        
        // Cambiar borde a transparente
         headerContainer.classList.remove('border-gray-800');
         headerContainer.classList.add('border-transparent');
        
        // Animar icono de vuelta a hamburguesa
        hamburgerIcon.classList.remove('opacity-0', 'scale-0');
        hamburgerIcon.classList.add('opacity-100', 'scale-100');
        closeIcon.classList.remove('opacity-100', 'scale-100');
        closeIcon.classList.add('opacity-0', 'scale-0');
        
        isMenuOpen = false;
      }
      
      // Event listeners
      mobileMenuButton.addEventListener('click', toggleMobileMenu);
      mobileMenuOverlay.addEventListener('click', closeMobileMenu);
      
      // Cerrar menú al hacer clic en enlaces
      mobileMenuLinks.forEach((link: HTMLAnchorElement) => {
        link.addEventListener('click', closeMobileMenu);
      });
    });
  </script>

<style>
  /* Estilos adicionales si son necesarios */
</style>